{"version":3,"sources":["components/Movie.js","routes/Home.js","routes/Detail.js","components/App.js","apollo.js","index.js"],"names":["LIKE_MOVIE","gql","Container","styled","div","Poster","props","bg","ToggleLike","button","id","isLiked","useMutation","variables","toggleLikeMovie","to","href","rel","onClick","GET_MOVIES","Header","header","Title","h1","Subtitle","h3","Movies","useQuery","data","loading","movies","map","m","Movie","medium_cover_image","GET_MOVIE","Column","h4","Description","p","Suggestions","useParams","console","log","suggestions","movie","title","language","rating","description_intro","s","App","exact","path","component","Home","Detail","client","ApolloClient","uri","cache","InMemoryCache","resolvers","Mutation","_","myMovie","__typename","modify","identify","fields","cachedName","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6a74e1cc.chunk.js","sourcesContent":["import { gql, useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst LIKE_MOVIE = gql `\n  mutation likeMovie($id: Int!, $isLiked: Boolean!) {\n    toggleLikeMovie(id: $id, isLiked: $isLiked) @client\n  }\n`\n\nconst Container = styled.div`\n   height: 380px;\n   width: 100%;\n   box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n   border-radius: 7px;\n `;\n\n const Poster = styled.div`\n   background-image: url(${props => props.bg});\n   height: 100%;\n   width: 100%;\n   background-size: cover;\n   background-position: center center;\n `;\n\n const ToggleLike = styled.button`\n  background-color: transparent;\n  border: transparent;\n  font-size: 20px;\n`;\n\n\n export default ({ id, bg, isLiked }) => {\n   const [toggleLikeMovie] = useMutation(LIKE_MOVIE, { variables: { id, isLiked }});\n   return (\n      <Container>\n        <Link to={`/${id}`}>\n          <Poster bg={bg} />\n        </Link>\n        <link href=\"https://emoji-css.afeld.me/emoji.css\" rel=\"stylesheet\"></link>\n        <ToggleLike onClick={toggleLikeMovie}>{isLiked ? \"üëé\" : \"üëç\"}</ToggleLike>\n      </Container>\n    );\n }\n\n\n\n// export default ({id}) => (\n//     <div>\n//         <Link to = {`/${id}`}>{id}</Link>\n//     </div>\n// );","import React from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport styled from \"styled-components\";\nimport Movie from \"../components/Movie\";\n\nconst GET_MOVIES = gql`\n    {\n        movies {\n            id\n            medium_cover_image\n            isLiked @client\n        }\n    }\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n`;\nconst Header = styled.header`\n  background-image: linear-gradient(-45deg, #d754ab, #fd723a);\n  height: 45vh;\n  color: white;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n`;\nconst Title = styled.h1`\n  font-size: 60px;\n  font-weight: 600;\n  margin-bottom: 20px;\n`;\nconst Subtitle = styled.h3`\n  font-size: 35px;\n`;\nconst Loading = styled.div`\n  font-size: 18px;\n  opacity: 0.5;\n  font-weight: 500;\n  margin-top: 10px;\n`;\n\nconst Movies = styled.div`\n   display: grid;\n   grid-template-columns: repeat(4, 1fr);\n   grid-gap: 40px;\n   width: 60%;\n   position: relative;\n   top: -50px;\n `;\n\n\n\nexport default () => {\n    const { loading, data } = useQuery(GET_MOVIES);\n    return (\n        <Container>\n          <Header>\n            <Title>Apollo 2020</Title>\n             <Subtitle>I love GraphQL</Subtitle>\n           </Header>\n           {/* {loading && <Loading>Loading...</Loading>}\n           {!loading && data.movies && data.movies.map(m => <Movie key = {m.id} id = {m.id} /> )} */}\n            <Movies>\n            {data?.movies?.map(m => (\n                <Movie key={m.id} id={m.id} isLiked={m.isLiked} bg={m.medium_cover_image} />\n            ))}\n            </Movies>\n         </Container>\n       );\n}","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { gql, useQuery } from \"@apollo/client\"\nimport styled from \"styled-components\";\nimport { Movies } from \"./Home\"\nimport Movie from \"../components/Movie\";\n\nconst GET_MOVIE = gql`\n    query getMovie($id: Int!) {\n        movie(id: $id) {\n            id\n            title\n            medium_cover_image\n            language\n            rating\n            description_intro\n            isLiked @client\n        }\n        suggestions(id: $id) {\n            id\n            medium_cover_image\n        }\n    }\n`\n\nconst Container = styled.div`\n   height: 100vh;\n   background-image: linear-gradient(-45deg, #d754ab, #fd723a);\n   width: 100%;\n   display: flex;\n   justify-content: space-around;\n   align-items: center;\n   color: white;\n `;\n\n const Column = styled.div`\n   margin-left: 10px;\n   width: 50%;\n `;\n\n const Title = styled.h1`\n   font-size: 65px;\n   margin-bottom: 15px;\n `;\n\n const Subtitle = styled.h4`\n   font-size: 35px;\n   margin-bottom: 10px;\n `;\n\n const Description = styled.p`\n   font-size: 28px;\n `;\n\n const Poster = styled.div`\n   width: 25%;\n   height: 60%;\n   background-color: transparent;\n   background-image: url(${props => props.bg});\n   background-size: cover;\n   background-position: center center;\n `;\n\n const Suggestions = styled.div`\n   display: grid;\n   grid-template-columns: repeat(4, 1fr);\n   grid-gap: 25px;\n   width: 100%;\n   position: relative;\n   top: 40px;\n `;\n\nexport default () => {\n    const { id } = useParams();\n    const { loading, data } = useQuery(GET_MOVIE, {\n        variables: { id: +id }\n    });\n    console.log(data?.suggestions)\n    return (\n        <Container>\n          <Column>\n            <Title>{loading ? \"Loading...\" : `${data.movie.title} ${data.movie.isLiked ? \"‚ù§Ô∏è\" : \"üíî\"}`}</Title>\n                <Subtitle>{data?.movie?.language} ¬∑ {data?.movie?.rating}</Subtitle>\n                <Description>{data?.movie?.description_intro}</Description>\n                <Suggestions>\n                  {data?.suggestions?.map(s => (\n                      <Movie key={s.id} id={s.id} bg={s.medium_cover_image}></Movie>\n                    ))}\n                </Suggestions>\n          </Column>\n          <Poster bg = {data?.movie?.medium_cover_image}></Poster>\n        </Container>\n      );\n\n    // if (loading) {\n    //     return \"loading...\";\n    // } \n    // if (data && data.movie) {\n    //     return data.movie.title;\n    // }\n}","import React from \"react\";\nimport {HashRouter as Router, Route} from \"react-router-dom\";\nimport Detail from \"../routes/Detail\";\nimport Home from \"../routes/Home\";\n\nfunction App() {\n  return <Router>\n    <Route exact path=\"/\" component={Home} />\n    <Route path=\"/:id\" component={Detail} />\n  </Router>\n}\n\nexport default App;\n","import { ApolloClient, InMemoryCache} from \"@apollo/client\";\n\nconst client = new ApolloClient({\n    uri: \"http://localhost:4000/\",\n    cache: new InMemoryCache(),\n    resolvers: {\n        Movie: {\n            isLiked: () => false\n        },\n        Mutation: {\n            toggleLikeMovie: (_, { id, isLiked }, { cache }) => {\n                const myMovie = {\n                    __typename: 'Movie',\n                    id: `${id}`,\n                    isLiked: `${isLiked}`,\n                };\n                cache.modify({ id: cache.identify(myMovie),\n                fields: {\n                    isLiked(cachedName) {\n                        return !isLiked\n                    }\n                }});\n            }\n        }\n    }\n});\n\nexport default client;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport client from \"./apollo\";\nimport { ApolloProvider } from \"@apollo/client\";\n\n\nReactDOM.render(\n  <ApolloProvider client = {client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}